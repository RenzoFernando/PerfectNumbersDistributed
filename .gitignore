# ###################################################################
# ### Archivo .gitignore Comprensivo para Proyectos Java con Gradle y ZeroC Ice ###
# ###################################################################
#
# Este archivo especifica intencionalmente los archivos y directorios
# que Git debe ignorar. Está diseñado para ser útil en un entorno de
# equipo donde los desarrolladores pueden usar diferentes IDEs y OS.

# ######################
# ## Archivos de Build (Gradle y otros)
# ######################
# Los directorios de build contienen archivos compilados y artefactos
# que se generan en cada construcción. No deben ser versionados.

# Directorio de build de Gradle (generalmente en la raíz y en cada submódulo)
**/build/

# Directorio .gradle (caché y archivos de trabajo de Gradle)
.gradle/

# Archivos de caché de nombres de tareas de Gradle
.gradletasknamecache

# Archivos de heap dump de Java (generados en caso de OutOfMemoryError)
*.hprof

# Archivos de empaquetado (JARs, WARs, EARs)
# Estos se generan con 'gradle build' o 'gradle jar', etc.
# Es mejor reconstruirlos que versionarlos, a menos que sea una distribución final específica.
*.jar
*.war
*.ear
*.zip
*.tar
*.tar.gz
*.rar

# Archivos compilados de Java
*.class

# ######################
# ## Archivos de IDEs
# ######################

# --- IntelliJ IDEA ---
# Archivos y directorios específicos de IntelliJ IDEA.
.idea/
*.iml
*.iws
modules.xml
# Archivos de workspace, pueden ser personales
# Descomentar si se prefiere no versionar en absoluto
# .idea/workspace.xml
# .idea/shelf/

# --- Visual Studio Code ---
# Archivos y directorios específicos de VS Code.
.vscode/

# --- Eclipse ---
# Archivos y directorios específicos de Eclipse.
.classpath
.project
.settings/
# Directorio de salida de compilación de Eclipse (si no se usa Gradle para todo)
bin/

# --- NetBeans ---
# Archivos y directorios específicos de NetBeans.
nbproject/private/
build/ # Ya cubierto por la regla general de Gradle
nbbuild/
dist/
nbdist/
.nb-gradle/

# ######################
# ## Archivos de Sistema Operativo
# ######################

# --- macOS ---
.DS_Store
.AppleDouble
.LSOverride
# Archivos temporales de macOS
.TemporaryItems
.Trashes

# --- Windows ---
# Miniaturas de imágenes
Thumbs.db
ehthumbs.db
# Configuración de carpetas
Desktop.ini
# Papelera de reciclaje en recursos compartidos
$RECYCLE.BIN/
# Archivos de accesos directos de Windows
*.lnk

# ######################
# ## Archivos de Log
# ######################
*.log
logs/
# Archivos de log de errores de la JVM (hs_err_pid*)
hs_err_pid*
replay_pid*

# ######################
# ## Archivos de ZeroC Ice
# ######################
#
# NOTA IMPORTANTE SOBRE ICE:
# Los archivos generados por `slice2java` (stubs, skeletons, helpers)
# DEBEN ser generados por el plugin de Gradle `ice-builder.slice`
# dentro del directorio `build` de tu módulo `PerfectNumbersApp` (o como lo hayas llamado).
# La regla `**/build/` ya cubre estos archivos generados, por lo que
# NO necesitas ignorarlos explícitamente aquí SI tu proyecto está configurado correctamente.
#
# Si por alguna razón tuvieras archivos de Ice generados manualmente en `src/`,
# deberías reconsiderar tu configuración de build.
# No obstante, si fuera estrictamente necesario ignorar patrones específicos:
#
# Ejemplo (NO RECOMENDADO SI USAS EL PLUGIN DE GRADLE CORRECTAMENTE):
# *Prx.java
# *I.java
# *Helper.java
# Holder.java
#
# En este proyecto, `PerfectNumbersApp/build/generated-src/` es donde se generan,
# y eso ya está cubierto por `**/build/`.

# ######################
# ## Archivos de Dependencias (Maven/Gradle Local)
# ######################
#
# Usualmente, las dependencias se gestionan con Gradle y se descargan en la caché
# global de usuario de Gradle, no dentro del proyecto.
# La carpeta `.gradle/` ya ignora la caché específica del proyecto.

# ######################
# ## Archivos Específicos de Herramientas y Temporales
# ######################

# Archivos de configuración local que no deben ser compartidos
# (ej. local.properties si tuvieras uno para claves de API, etc.)
# local.properties
# *.local

# Archivos de backup de editores comunes
*~
*.bak
*.swp
*.swo

# ######################
# ## Documentación Generada (si aplica)
# ######################
# Si generas Javadoc o similar en un directorio específico que no sea 'build'
# docs/api/

# ######################
# ## Otros
# ######################

# Archivos de Papelera de Linux
.Trash-*

# Archivos de testeo específicos (si no están en build)
# Por ejemplo, reportes de Cobertura, JaCoCo si se generan fuera de /build
# cobertura.ser
# jacoco.exec

# Archivos de variables de entorno (común en algunos frameworks)
.env

# Archivos de configuración de editores como EditorConfig si no se desea versionar
# .editorconfig

# Fin del archivo .gitignore
